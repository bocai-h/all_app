
user bocai;
worker_processes  1;

error_log  /var/log/nginx/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

pid        logs/nginx.pid;


events {
    use epoll;    #epoll是多路复用I/O(I/O Multiplexing)中的一种方式,但是仅用于linux2.6以上内核,可以大大提高nginx的性能
    worker_connections  1024;
}

#设定http服务器,利用它的反向代理功能提供负载均衡支持
http {
    include      /etc/nginx/mime.types;  #设定mime类型,类型由mime.types文件定义
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';
   
    #设定日志格式
    access_log  /var/log/nginx/access.log;

    sendfile        on;
    tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;
    types_hash_max_size 2048;
    server_tokens off;
    #开启gzip压缩
    gzip  on;
    gzip_disable "msie6"
    gzip_http_version 1.1;
    gzip_proxied any;
    gzip_min_length 500;
    gzip_types text/plain text/xml text/css
               text/comma-separated-values text/javascript
               application/x-javascript application/atom+xml;
    

    #设定请求缓冲
    #client_header_buffer_size 1k;
    #large_client_header_buffers 4.4k;

    #设定负载均衡服务器列表
    upstream unicorn{
     #weight参数表示权值,权值越高被分配的几率就越大
     server unix:/home/bocai/my_project/all_app/shared/sockets/unicorn.sock fail_timeout=0;
    }
    
   ##
   # virtual Host configs
   ##

   include /etc/nginx/conf.d/*.conf;
   include /etc/nginx/sites-enabled/*;

    server {
        listen       80;
        server_name  all_app.com;
        keepalive_timeout 300;
        client_max_body_size 4G;
       
        root /home/bocai/my_project/all_app/public;
        try_files $uri/index.html $uri.html $uri @unicorn;
        #charset koi8-r;

        #access_log  logs/host.access.log  main;

       #location / {
            #root   /usr/share/nginx/html;
            #root /home/bocai/my_project/all_app/public;
            # index  index.html index.htm;
       # }
    
       location @unicorn{
         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
         proxy_set_header Host $http_host;
         proxy_set_header X-Forwarded_Proto $scheme;
         proxy_redirect off;
         proxy_pass http://unicorn;
         proxy_read_timeout 300s;
         proxy_send_timeout 300s;
       }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /home/bocai/my_project/all_app/public;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
